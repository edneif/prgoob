//============================================================================
// Name        : avaliacao2.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
//#include "..\inc\ednei_p2.h"
using namespace std;


#include <iostream>
#include <vector>
#include <math.h>

class Funcao {
public:
	Funcao();
	Funcao(Funcao *f);
	double operator() (double x=0) {return x;}
	virtual ~Funcao();
private:

};


class Constante : public Funcao {
public:
	Constante();
	Constante(double value) : _value(value) {
		cout << "(" << this << ") f(x)=(" << _value << ") " << endl;
	}
	double operator()(double) {return _value;}
	virtual ~Constante();
private:
	double _value;

};


class Seno : Funcao {
public:
	Seno();
	Seno(double val, Funcao* f) {}
	Seno(Funcao* f) {}
	Seno(double val) {}
	double operator()(double x) {
			return (sin(x));
	}
	virtual ~Seno();

private:


};


class Coseno : Funcao {
public:
	Coseno();
	Coseno(double val, Funcao* f) {}
	Coseno(Funcao* f) {}
	Coseno(double val) {}
	double operator()(double x) {
		return (cos(x));
	}
	virtual ~Coseno();
};


class FuncaoAgregada {
public:
	FuncaoAgregada();
	virtual ~FuncaoAgregada();
};


class Escalar : Funcao {
public:
	Escalar();
	Escalar (double val, Funcao *f): _value(val), f(f){}
	Escalar(Funcao* f) : f(f){ }
	Escalar(double value) : _value(value) { }
	double operator()(double x) {
			double _escalar = 0;
			_escalar = (*f)(x);
			_escalar = _escalar * _value;
			return (_escalar);
		}
	virtual ~Escalar();
private:
	double _value;
	Funcao* f;
};


class Potencial : Funcao{
public:
	Potencial();
	Potencial(double val, Funcao *f): _value(value), f(f){}
	Potencial(Funcao* f) : f(f) {}
	Potencial(double value) : _value(value) {}
	double operator()(double x){
			double _potencial = x;
			uint8_t i;
			for (i = 0; i < (_value - 1); i++) {
				_potencial *= x;
			}
			return (_potencial);
		}
	virtual ~Potencial();
private:
	double _value;
	Funcao* f;
};


class Exponencial : Funcao {
public:
	Exponencial();
	Exponencial(double value, Funcao* f) : _value(valeu), f(f) {}
	Exponencial(Funcao* f) : f(f) {}
	Exponencial(double value) : _value(value) {}
	double operator()(double x) {
			return x;
		}
	virtual ~Exponencial();
private:
	double _value;
	Funcao* f;
};



int main() {

	cout << "ver 0.1" << endl;
	Constante(5.0);

	return 0;
}
